#!/usr/bin/env node

/**
 * Module dependencies.
 */

var apps = require('../app');
var app = apps.app;
var debug = require('debug')('chatter:server');
var http = require('http');

require('dotenv').config();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Socket.io Setting
 */
const io = require('socket.io')(server);

io.use((socket, next) => {
  apps.sessionMiddleware(socket.request, {}, next);
})
const socketHandler = require('../socket/socketHandler');
io.on('connection', socketHandler(io));

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Check Data Folder Existance
 */

const fs = require('fs')
const dataDir = fs.existsSync(__dirname + "/../data")
if (!dataDir) {
  console.log("Init Data Folder")
  const userDefault = {totalNum:0, users:[]}
  const roomDefault = {totalNum:0, rooms:[]}
  fs.mkdirSync(__dirname + "/../data", { recursive: true })
  fs.writeFileSync(__dirname + "/../data/user.json", JSON.stringify(userDefault))
  fs.writeFileSync(__dirname + "/../data/chatRoom.json", JSON.stringify(roomDefault))
}






